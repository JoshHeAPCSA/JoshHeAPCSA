public int findFreeBlock(int period, int duration)
{
    //统计当前的可用连续分钟数
    int blockLength = 0;

    //遍历时间段中的每一分钟
    for (int minute = 0; minute < 60; minute++)
    {
        //如果该分钟是可用的
        if (isMinuteFree(period, minute))
        {
            blockLength++;
            //如果找到了足够长的可用分钟数
            if (blockLength == duration)
            {
                //返回该连续块的起始时间
                return minute - duration + 1;
            }
        }
        else
        {
            //如果该分钟不可用，重新开始计数
            blockLength = 0;
        }
    }
    reutrn -1;
}

public boolean makeAppointment(int startPeriod, int endPeriod, int duration)
{
    //遍历从startperiod到endperiod的每一个时间段
    for (int period = startPeriod; period <= endPeriod; period++)
    {
        //如果我们在当前时间段找到了符合条件的可用时间块
        int minute = findFreeBlock(period, duration);

        if (minute != -1)
        {
            //预定该块，并返回true
            reserveBlock(period, minute, duration);
            return true;
        }
    }
    //如果没有找到可用时间块，返回false
    return false;
}

public class Sign
{
    private String message;
    private int width;

    //构造函数，初始化message和width
    public Sign(String m, int w)
    {
        message = m;
        width = w;
    }

    //计算需要多少行来显示信息
    public int numberOfLines()
    {
        int len == message.length();
        if (len == 0) {
            return 0;
        } else if (len % width == 0) {
            return len / width;
        } else (len % width != 0) {
            return len /width + 1;
        }
    }

    //把消息进行分割，并返回用分号分隔开的字符串
    public String getLines()
    {
        int linesNeed = numberOfLines();
        //如果消息为空，返回null
        if (linesNeed == 0) {
            return null;
        }

        String signLines = "";
        //遍历所有行，把除了最后一行的每一行结尾加上分号
        for (int i = 1; i < lineNeed; i++) {
            signLines += message.substring((i - 1) * width, i* width) + ";";
        }
        //添加最后一行
        return signLines + message.substring((linesNeed - 1) * width);
    }
}

public void cleanData(double lower, double upper)
{
    //从temperatures列表的最后一个元素开始遍历，避免跳过元素
    for (int i = temperatures.size() - 1; i >= 0; i--)
    {
        double temp = temperatures.get(i);
        //如果当前温度低于lower或者高于upper，将其从列表中删除
        if (temp < lower || temp > upper)
        {
            temperatures.remove(i);
        }
    }
}

public int longestHeatWave(double thershold)
{
    //初始化当前热浪的长度
    int waveLength = 0;
    //最大热浪的长度
    int maxWaveLength = 0;

    //遍历temperatures列表中的每一个温度
    for (double temp : temperatures)
    {
        //如果当前温度高于threshold，则热浪长度加1
        if (temp > threshold)
        {
            waveLength++;
            //如果当前热浪长度大于最大热浪长度，则更新最大热浪长度
            if (waveLength > maxWaveLength)
            {
                maxWaveLength = waveLength;
            }
        }

        else
        {
            //当前温度不超过阈值，重置waveLength;
            waveLength = 0;
        }
    }

    return maxWaveLength;
}

public boolean moveCandyToFirstRow(int col)
{
    //如果第0行该列中已经有糖果，return true
    if (box[0][col] != null)
    {
        return true;
    }

    //从第1行开始向下搜索该列
    for (int row = 1; row < box.length; row++)
    {
        //如果找到糖果，将其移动到第0行，return true
        if (box[row][col] != null)
        {
            box[0][col] = box[row][col];
            box[row][col] = null;
            return true;
        }
    }
    //如果没有找到糖果
    return false;
}

public Candy removeCandy(String flavor)
{
    //从最后一行开始，逐渐向上搜素
    for (int row = box.length - 1; row >= 0; row--)
    {
        //从左向右遍历当前行的所有糖果
        for (int col = 0; col < box[0].length; col++)
        {
            //检查当前位置是否有糖果，且糖果口味与查找的口味匹配
            if (box[row][col] != null && box[row][col].getFlavor().equals(flavor))
            {
                //保存找到的糖果，移除它，返回糖果
                Candy taken = box[row][col];
                box[row][col] = null;
                return taken;
            }
        }
    }
    //如果没有找到匹配的糖果，返回null
    return null;
}